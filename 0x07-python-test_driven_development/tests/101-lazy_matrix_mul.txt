The 101-lazy_matrix_mul Module
==============================

Using lazy_matrix_mul
---------------------

      >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Now Use it:
Using list of list and int and float
      >>> print(lazy_matrix_mul([[1, 3], [3, 1]], [[1, 2], [2, 1]]))
      [[7 5]
       [5 7]]

      >>> print(lazy_matrix_mul([[2, 5]], [[3, 5], [4, 6]]))
      [[26 40]]

      >>> print(lazy_matrix_mul([[2, 5, 4], [3, 4, 5], [5, 4, 6]], [[3, 5], [4, 6], [4, 6]]))
      [[42 64]
       [45 69]
       [55 85]]

Using empty list
      >>> print(lazy_matrix_mul([[]], [[3, 4], [5, 6]]))
      Traceback (most recent call last):
      ValueError: m_a can't be empty

      >>> print(lazy_matrix_mul([[3, 4,], [4, 5]], [[]]))
      Traceback (most recent call last):
      ValueError: m_b can't be empty

Using non list
      >>> print(lazy_matrix_mul((1, 2, 3), [[3, 4], [5, 6]]))
      Traceback (most recent call last):
      TypeError: m_a must be a list of lists

      >>> print(lazy_matrix_mul([[1, 2], [3, 4]], "[[3, 4], [5, 6]]"))
      Traceback (most recent call last):
      TypeError: m_b must be a list of lists

Using non int and float
      >>> print(lazy_matrix_mul([["1", 3], [3, 1]], [[1, 2], [2, 1]]))
      Traceback (most recent call last):
      TypeError: m_a should contain only integers or floats

      >>> print(lazy_matrix_mul([[1, 3], [1, 2]], [[1, "2"]]))
      Traceback (most recent call last):
      TypeError: m_b should contain only integers or floats
